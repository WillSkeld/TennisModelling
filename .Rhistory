((stateID.x == 5 | stateID.x == 6 | stateID.x == 4) &
!is.na(stateID.y)))
statePairTallies_sit <- pairStates_sit %>% group_by(stateID.x, stateID.y) %>% tally() %>%
group_by(stateID.x) %>% arrange(.by_group = TRUE) %>% replace_na(list(stateID.y = 10))# state pair totals
curStatePairTallies_sit <- pairStates_sit %>%
group_by(stateID.x) %>% tally() %>%
arrange(.by_group = TRUE) #Individual state tallies
tpsLite1_sit <- function(){
M <- matrix(nrow = nrow(statesIDs_sit)+1, ncol = nrow(statesIDs_sit)+1)
for(i in 0:nrow(curStatePairTallies_sit)+1){
for(j in 0:nrow(statesIDs_sit)+1){
if(nrow(statePairTallies_sit %>% filter(stateID.x == i & stateID.y == j)) <1){
M[i,j] <- 0
}
else{
M[i,j] <- as.numeric((statePairTallies_sit %>% filter(stateID.x == i & stateID.y == j) %>%
ungroup() %>% select(n)))/as.numeric((curStatePairTallies_sit %>%
filter(stateID.x == i) %>% select(n)))
}
}
}
return(M)
} #create tranisition matrix
TP_sit <- tpsLite1_sit()
rownames(TP_sit)<- c('Attacking Error', 'Defensive Error', 'Neutral Error',
'Attacking In', 'Defensive In', 'Neutral In',
'Attacking Winner', 'Defensive Winner', 'Neutral Winner', 'Point End')
colnames(TP_sit)<- c('Attacking Error', 'Defensive Error', 'Neutral Error',
'Attacking In', 'Defensive In', 'Neutral In',
'Attacking Winner', 'Defensive Winner', 'Neutral Winner', 'Point End')
TP_sit[10,10] <-1
stateMatrixSitu<-function(gamestyles=c("Aggressive baseliner", "Baseliner / Counter Puncher", "Big server / Aggressive baseliner",
"Big server", "All court player")){
sts1 <- sts %>% select(c('Date','Player','Opponent','Point Index', 'Shot Index','Shot Outcome', 'Shot Number',
'Shot Type', 'Approach', 'Situation', 'Shot Stroke', 'Shot By', 'Player Gamestyle')) %>% group_by(Date,Player,Opponent,`Point Index`) %>%
mutate(ovrID=cur_group_id()) %>% ungroup() %>% filter(!(`Shot Outcome` == 'Double Fault' & `Shot Number` == 'Return') &
!(is.na(`Shot Outcome`) & `Shot Number` == 'Serve') &
!(`Shot Outcome` == 'Out') &
!(is.na(`Shot Stroke`) & !(`Shot Number` == 'Serve')) &
!(`Shot Outcome` == 'Return WInner') & !(`Shot Outcome` == 'WInner') &
!(is.na(`Shot Number`)) &
!(`Shot Outcome` == 'Winner' &`Shot Number` == 'Return') &
!(`Shot Number`== 'Serve' & !is.na(`Shot Stroke`))
) %>% filter(`Player Gamestyle` %in% gamestyles) #Filter data and reduce columns
reducedSts<- sts1 %>% mutate(`Shot Outcome` = case_when(`Shot Outcome` == 'Return Error' |
`Shot Outcome` == 'Unforced Error' |
`Shot Outcome` == 'Forced Error' ~ 'Error',
`Shot Outcome` == 'Return Winner' |
`Shot Outcome` == 'Winner'  ~ 'Winner',
`Shot Outcome` == 'In'  ~ 'In')) %>% filter(!(is.na(Situation)))
reducedOutcomes_sit <- reducedSts %>% filter(`Shot Number`!= 'Serve') %>% select(c('Shot Outcome', 'Situation')) %>% distinct()
#-------------------------------------------SET UP----------------------------------------------------------
statesIDs_sit <- reducedOutcomes_sit %>% group_by(`Shot Outcome`, `Situation`) %>% arrange(.by_group = TRUE) %>%
mutate(stateID=cur_group_id()) #gives each state a no. instead of using full state desc.
seqShotIDs_sit <- reducedSts %>%  filter(`Shot Number`!= 'Serve') %>%
select(c('Shot Index','Shot Outcome', 'Shot Number', 'Situation', 'ovrID')) %>%
left_join(statesIDs_sit, by=join_by(`Shot Outcome`, `Situation`)) %>%
select(stateID, `Shot Index`, ovrID) #group each shot to find sequential points using a point ID
pairStates_sit <- seqShotIDs_sit %>% left_join(seqShotIDs_sit, by=join_by(ovrID, closest('Shot Index'<'Shot Index'))) %>%
select(c('stateID.x', 'stateID.y')) %>% filter(((stateID.x == 2 | stateID.x == 1 | stateID.x == 3 |
stateID.x == 9 | stateID.x == 8 | stateID.x == 7)
& is.na(stateID.y)) |
((stateID.x == 5 | stateID.x == 6 | stateID.x == 4) &
!is.na(stateID.y)))
#join to find sequential shots within the same point
statePairTallies_sit <- pairStates_sit %>% group_by(stateID.x, stateID.y) %>% tally() %>%
group_by(stateID.x) %>% arrange(.by_group = TRUE) %>% replace_na(list(stateID.y = 10))# state pair totals
curStatePairTallies_sit <- pairStates_sit %>%
group_by(stateID.x) %>% tally() %>%
arrange(.by_group = TRUE) #Individual state tallies
#-------------------------------------------SET UP----------------------------------------------------------
tpsLite1_sit <- function(){
M <- matrix(nrow = nrow(statesIDs_sit)+1, ncol = nrow(statesIDs_sit)+1)
for(i in 0:nrow(curStatePairTallies_sit)+1){
for(j in 0:nrow(statesIDs_sit)+1){
if(nrow(statePairTallies_sit %>% filter(stateID.x == i & stateID.y == j)) <1){
M[i,j] <- 0
}
else{
M[i,j] <- as.numeric((statePairTallies_sit %>% filter(stateID.x == i & stateID.y == j) %>%
ungroup() %>% select(n)))/as.numeric((curStatePairTallies_sit %>%
filter(stateID.x == i) %>% select(n)))
}
}
}
return(M)
} #create tranisition matrix
TP_sit <- tpsLite1_sit()
TP_sit[10,10] <-1
rownames(TP_sit)<- c('Attacking Error', 'Defensive Error', 'Neutral Error',
'Attacking In', 'Defensive In', 'Neutral In',
'Attacking Winner', 'Defensive Winner', 'Neutral Winner', 'Point End')
colnames(TP_sit)<- c('Attacking Error', 'Defensive Error', 'Neutral Error',
'Attacking In', 'Defensive In', 'Neutral In',
'Attacking Winner', 'Defensive Winner', 'Neutral Winner', 'Point End')
return(TP_sit)
}
sts <- sbs %>% filter(Type=="men's singles")
sts$`Shot Number`[as.numeric(sts$`Shot Number`)>2] <- 'Rally'
TPpop<-stateMatrixSitu()
TPagg<-stateMatrixSitu("Aggressive baseliner")
TPctp<-stateMatrixSitu("Baseliner / Counter Puncher")
TPsag<-stateMatrixSitu("Big server / Aggressive baseliner")
TPser<-stateMatrixSitu("Big server")
TPacp<-stateMatrixSitu("All court player")
melted_data <- melt(TPpop)
ggplot(melted_data, aes(x = Var1, y = reorder(Var2,-Var2), fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "yellow",
low = "white",
midpoint = 0.5,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
colnames(redistMatrix)<- c('Attacking Error', 'Defensive Error', 'Neutral Error',
'Attacking In', 'Defensive In', 'Neutral In',
'Attacking Winner', 'Defensive Winner', 'Neutral Winner')
TPagg<-stateMatrixSitu("Aggressive baseliner")
TPagg
TPpop<-stateMatrixSitu()
melted_data <- melt(TPpop)
#heatmaps
library(expm)
library(ggplot2)
library(reshape2)
melted_data <- melt(TPpop)
ggplot(melted_data, aes(x = Var1, y = reorder(Var2,-Var2), fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "yellow",
low = "white",
midpoint = 0.5,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "yellow",
low = "white",
midpoint = 0.5,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
melted_data <- melt(TPpop) %>% filter(Var1 =='Attacking In' |Var1 == 'Defensive In' | Var1 =='Neutral In' )
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "yellow",
low = "white",
midpoint = 0.5,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "yellow",
low = "white",
midpoint = 0.3,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
low = "white",
midpoint = 0.3,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "blue",
midpoint = 0.3,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.3,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.35,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
melted_data
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
melted_data <- melt(TPpop) %>% filter(Var1 =='Attacking In' |Var1 == 'Defensive In' | Var1 =='Neutral In' &(Var2!='Point End') )
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
melted_data <- melt(TPpop) %>% filter((Var1 =='Attacking In' |Var1 == 'Defensive In' | Var1 =='Neutral In') &(Var2!='Point End') )
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
melted_data
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "green",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "blue",
mid = "green",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "blue",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "green",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "green",
low = "white",
) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
red
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
#-----------------------------------Agg----------------------------------------------------------------------
melted_data <- melt(TPagg) %>% filter((Var1 =='Attacking In' |Var1 == 'Defensive In' | Var1 =='Neutral In') &(Var2!='Point End') )
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
TPagg
ggplot(melted_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
2
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
mats<-list(TPagg,TPacp,TPser,TPctp,TPsag)
M<-matrix(nrow = 5, ncol = 5)
for(i in 1:5){
for(j in 1:5){
M[i,j]<- norm(mats[i], mats[j], 'f')
}
}
M[i,j]<- norm(mats[i], mats[j], 'F')
M[i,j]<- norm(mats[i]-mats[j], 'F')
M[i,j]<- norm(mats[[i]]-mats[[j]], 'F')
mats<-list(TPagg,TPacp,TPser,TPctp,TPsag)
M<-matrix(nrow = 5, ncol = 5)
for(i in 1:5){
for(j in 1:5){
M[i,j]<- norm(mats[[i]]-mats[[j]], 'F')
}
}
M
mats[[i]]
mats[[i]]['Attacking Error']
mats[[i]][1]
M[i,j]<- norm(mats[[i]]-mats[[j]], 'F')
mats[[i]]
melted_data <- melt(M)
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "purple",
mid = "light purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
red
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.355,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.15,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.15,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
for(i in mats){
for(j in mats){
M[i,j]<- norm(mats[[i]]-mats[[j]], 'F')
}
}
for(i in mats){
for(j in mats){
M[i,j]<- norm(mats[[i]]-mats[[j]], 'F')
}
}
for(i in 1:5){
for(j in 1:5){
M[i,j]<- norm(mats[[i]]-mats[[j]], 'F')
}
}
M
ggplot(melted_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.075,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = reorder(Var2,-Var2), fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
colnames(M)<- c('AGG', 'ACP', 'SER', 'CTP', 'SAG')
melted_data <- melt(M)
ggplot(melted_data, aes(x = Var1, y = reorder(Var2,-Var2), fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
rownames(M)<- c('AGG', 'ACP', 'SER', 'CTP', 'SAG')
melted_data <- melt(M)
ggplot(melted_data, aes(x = Var1, y = reorder(Var2,-Var2), fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
mats<-list(TPagg,TPacp,TPser,TPctp,TPsag)
M<-matrix(nrow = 5, ncol = 5)
for(i in 1:5){
for(j in 1:5){
M[i,j]<- norm(mats[[i]]-mats[[j]], 'F')
}
}
colnames(M)<- c('AGG', 'ACP', 'SER', 'CTP', 'SAG')
rownames(M)<- c('AGG', 'ACP', 'SER', 'CTP', 'SAG')
melted_data <- melt(M)
ggplot(melted_data, aes(x = Var1, y = reorder(Var2,-Var2), fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = reorderVar2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = VVar2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(x = "Column", y = "Row",
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = reorder(Var2,-Var2), fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(high = "red",
mid = "purple",
low = "white",
midpoint = 0.1,) +
labs(
title = "Pop Matrix - Situation") +
theme(axis.text.x = element_text(angle = 90))
